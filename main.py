
import streamlit as st
import pandas as pd
#import numpy as np
import pydeck as pdk
from pydeck.types import String
import math
import plotly.express as px


DATAFILE5_4 = "./data/ET_5.4_JAN_23.xlsx"
DATAFILE4_4 = "./data/ET_4.4_JAN_23.xlsx"
SHEET4_4 = "Month (Million m3)"
SHEET5_4 = "Quarter"

st.set_page_config(layout="centered")
st.title('Energy Production and Availability')

@st.cache_data
def load_data(File: str,Sheet: str, head: int):
    data = pd.read_excel(File, Sheet, index_col=0, header=head)
    return data


# 3 tabs for layout
tab1, tab2, tab3 = st.tabs(["__üìàEnergy Production__", "__üìàüó∫Ô∏è GAS Import__","__üóÉ Info__"])
# --------------------------------------------------------------
with tab1:
    data5_4 = load_data(DATAFILE5_4, SHEET5_4, 6)

    # remove incomplete data
    data5_4.drop(data5_4.loc['Quarter 1 1997':'Quarter 4 2020'].index, axis=0, inplace = True)
    # remove columns not useful to graphs
    col_drop =['Onshore \nwind','Offshore \nwind','Pumped \nstorage \n[note 11]','Total electricity supplied by MPPs','Own use','Electricity generated by Major Power Producers','Total electricity \navailable']
    data5_4.drop(col_drop, axis='columns', inplace = True)
    col_replace ='\n|\[(.*?)\]' # reg ex remove new line and anything between [ ] 
    data5_4.columns = data5_4.columns.str.replace(col_replace, '', regex=True)
    data5_4.columns = data5_4.columns.str.strip() # plus lead/trail spaces

    # subtract Gas to highlight its significance
    data5_4['Other Fossil Fuel'] = data5_4['Fossil fuels'] - data5_4['Gas']
    data5_4['Low Carbon'] = data5_4['Fossil fuels'] - data5_4['Gas']
    # create data subset of filtered range
    filtered_data5_4 = data5_4.loc[:,['Gas','Renewables','Nuclear','Other Fossil Fuel']]

    #format data
    filtered_data5_4['Gas'] = filtered_data5_4['Gas'].astype(float)
    filtered_data5_4['Renewables'] = filtered_data5_4['Renewables'].astype(float)
    filtered_data5_4['Nuclear'] = filtered_data5_4['Nuclear'].astype(float)
    filtered_data5_4['Other Fossil Fuel'] = filtered_data5_4['Other Fossil Fuel'].astype(float)
    filtered_data5_4 = filtered_data5_4.reset_index()
    #filtered_data5_4.index = pd.to_datetime(filtered_data5_4.index)
    filtered_data5_4['Quarter'] = filtered_data5_4['Quarter'].astype(str)


    st.header("UK Dependancy On Gas for Energy Production")

    st.markdown("Over the last 2 years the UK has become more dependant on GAS to produce  Energy.  It has also become a NET exporter of Electricity.  \n This is due to problems in France with several Nuclear reactors shutdown for long term maintenance. ")
    st.markdown("Dependancy on Gas is set to continue as renewables (mostly wind) are dependant on weather and geographical demand")


    melty = pd.melt(filtered_data5_4, 
              value_vars=['Gas','Renewables','Nuclear','Other Fossil Fuel'], 
              id_vars=['Quarter'],
              var_name='Name'
              )

    c1 = px.bar(melty, x="Quarter", y="value",
             color='Name', barmode='group',
             labels={"value": "Electrictiy Production (TWh)",
                     "Name": "Generation Type"                     
             },
             color_discrete_map={"Gas": "#3666CC",'Renewables': "rgb(82,188,163)",'Nuclear': "rgb(246,207,103)", "Other Fossil Fuel": "rgb(188,128,189)"},
             height=600,width=800)
    
    c1.update_layout(
        title="Electricity Production by Source UK",
        #xaxis_title="X Axis Title",
        #yaxis_title="Y Axis Title",
        #legend_title="Legend Title",
        font=dict(
            family="Arial",
            size=20,
            color="#000000"
        )
        )

    config = {'displayModeBar': False} # hides the plotly interactive overlay
    st.plotly_chart(c1, config=config)

    st.markdown("Note: In this table, **'renewable'** energy includes wind, solar, hydro and bioenergy, **'Other fossil fuels'** includes coal and oil.")

#---------------------------------------------------------------
with tab2:

    st.header("Gas Import via Pipeline and LNG via Ship")

    st.markdown("The UK's substantial LNG regasification infrastructure allows it to operate as a land-bridge to Europe for LNG largely from Qatar and the US.")
    #st.image("./data/Picture1.png")
    radio_select = st.radio(
        "****Goto Event üëá****",
        ["March 2022: Last Import from Russia","April 2022: Belgium Used to Export", "Oct 2022: Import From Chile For First Time","Explore Yourself"],
        key="visibility",
        label_visibility='visible',
        disabled=False,
        horizontal=False,
    )

    data4_4 = load_data(DATAFILE4_4, SHEET4_4, 5)
    col_drop =['Langeled to Easington','Via FLAGS to St Fergus','Frigg / Vesterled to St Fergus ','SAGE to St Fergus','CATS  to Teesside']

    data4_4 = data4_4.drop(col_drop,axis='columns')
    data4_4.drop(data4_4.loc['January 2000':'December 2019'].index, axis=0, inplace = True)
    # remove provisional data
    data4_4.drop(index=['November 2022 [provisional]'], axis=0, inplace = True)
    # extract column for slider
    graph_range2 = data4_4.index.to_list()
    graph_columns2 = data4_4.columns.to_list()
    
    #st.text(f'{radio_select}')
    if radio_select == 'Explore Yourself' :
        # create slider with index as range
        date_select = st.select_slider("__Date__", options=graph_range2,value=(graph_range2[0]),)
        filtered_data4_4 = data4_4.loc[date_select]
    elif radio_select == "April 2022: Belgium Used to Export":
        date_select = 'April 2022'
    elif radio_select == "Oct 2022: Import From Chile For First Time":
        date_select = 'October 2022'
    elif radio_select == "March 2022: Last Import from Russia":
        date_select = 'March 2022'
    else:
        date_select = 'January 2020'

    # display some contextual narrative around dates.
    if date_select == 'April 2022':
        narrative = 'pipeline imports were entirely from Norway as interconnectors to Belgium\nand the Netherlands were used to export to EU rather than import due to \nRussian Pipeline shutdown.'
    elif date_select == 'March 2022':
        narrative = 'Due to disputes over Russian Pipeline and War in Ukraine,\nUK stopped importing from Russia'
    elif date_select == 'October 2022':
        narrative = 'First time the UK has imported GAS from Chile'
    else:
        narrative = ''


    filtered_data4_4 = data4_4.loc[date_select]
    st.header(f"{date_select} : GAS Import to the UK")
    st.text(narrative)

    # clean up data table, remove non displayed columns
    col_drop2 =['Total pipeline','Total LNG','Total Imports']
    filtered_data4_4 = filtered_data4_4.drop(col_drop2, axis='index')

    # create dict of latitude and longitude that match the place names in the data set
    lat_lon_data = {"index":filtered_data4_4.index.to_list(), "lat":[51.331348,52.05109,61.1529386,28.0000272,-11.8775768,-24.7761086,50.6402809,4.6125522,-31.7613365,19.0974031,26.2540493,1.613172,46.603354,52.2434979,9.6000359,66.1529386,61.1529386,-6.8699697,25.3336984,64.6863136,39.3260685,10.7466905,39.7837304,16.3471243],"lon":[3.20684,5.63178,8.7876653,2.9999825,17.5691241,134.755,4.6667145,13.1535811,-71.3187697,-70.3028026,29.2675469,10.5170357,1.8883335,5.6343227,7.9999721,12.5876653,8.7876653,-75.0458515,51.2295295,97.7453061,-4.8379791,-61.0840075,-100.445882,47.8915271]}

    # create text latitude array to shift text below bar columns
    lon_text = lat_lon_data['lon'].copy()
    lon_text = [x+4 for x in lon_text]
    lat_lon_data["lontext"] = lon_text

    df_lat_lon = pd.DataFrame(lat_lon_data)
    df_lat_lon.set_index('index')
    df_lat_lon["values"]= filtered_data4_4.to_numpy()

    # filter out 0 values so the graph is cleaner
    for index, row in df_lat_lon.iterrows():
        #print(row['values'])
        if row['values'] == 0:
            df_lat_lon = df_lat_lon.drop([index])

    df_lat_lon["radius"] = df_lat_lon["values"].apply(lambda values: math.sqrt(values))

    # map chart
    st.pydeck_chart(pdk.Deck(
        map_style='dark',  #matches streamlit theme
        initial_view_state=pdk.ViewState(
            latitude=40.376,
            longitude=0,
            zoom=1.05,
            height=600,
            width=800,
            min_zoom=1,
            max_zoom=1.5,       
            pitch=30,
        ),
        layers=[
            pdk.Layer(
                'ColumnLayer',
                data=df_lat_lon,
                pickable=True,
                extruded=True,
                radius=77500,
                elevation_scale=50000,
                radius_min_pixels=1,
                radius_max_pixels=225,
                line_width_min_pixels=1,
                get_position='[lon, lat]',
                get_elevation='radius',
                get_fill_color=[0, 180, 255,95],
                get_line_color=[0, 180, 255],
            ),
            pdk.Layer(
                'TextLayer',
                data=df_lat_lon,
                pickable=True,
                get_position='[lontext, lat]',
                get_text='index',
                get_size=14,
                get_color=[255, 255, 0],
                get_angle=0,
                # String constants in pydeck are explicitly pass as strings
                # This distinguishes them from columns in a data set
                get_text_anchor=String("start"),
                get_alignment_baseline=String("bottom"),
            )
        ]
    ))

    x1 = st.checkbox('Show raw data',key='1234')
    if x1:
        st.subheader('Raw data')
        st.write(filtered_data4_4)


# --------------------------------------------------------------
with tab3:
    st.header("Info")
    st.markdown("**Developer:** Richard Muia")
    st.markdown("**Assignment:** CETM25")
    st.markdown("**ID:** bi02vl")
    st.markdown("**Version:** 1.0")
    st.markdown("**Date:** 5th March 2023")
    st.write("Datasets Available From: [link](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1126193/Energy_Trends_table_of_tables.pdf)")

    x2 = st.checkbox('Show raw data',key='1p234')
    if x2:
        st.subheader('Raw data ET_4.4')
        st.write(data4_4)
        st.subheader('Raw data ET_5.4')
        st.write(data5_4)
